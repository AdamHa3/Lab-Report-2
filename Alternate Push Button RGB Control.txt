/*  

Alternate Push Button RGB control program code 

Program goal: When the push button (PB) is pressed, the RGB LED lights up Red and Blue; when the PB is not pressed, it lights up Red and Green

Theme : Digital Input controlling Digital Output  

*/  

 
 

int pushButton = 2; //Associating pin 2 with the PB  

 
 

int red = 12; //Associating pin 12 with the colour Red of the RGB      

 
 

int green = 11; //Associating pin 11 with the colour Green of the RGB   

 
 

int blue = 10; //Associating pin 10 with the colour Blue of the RGB  

 
 

// The setup function runs once when the board is powered on or reset.

void setup() {  

 
 

Serial.begin(9600); //Create connection to the serial monitor   

 
 

pinMode(pushButton, INPUT_PULLUP); //The pushButton's pin is set as an INPUT_PULLUP, meaning that it used the resistance of the Arduino  

 
 

// set digital pins 10, 11, and 12 as outputs.  

 
 

pinMode(12, OUTPUT);  

 
 

pinMode(11, OUTPUT);  

 
 

pinMode(10, OUTPUT);  

 
 

}  

 
 

// the loop routine runs over and over again forever:   
 
 

void loop() {   


 
int buttonState = digitalRead(pushButton); //read the value of PB as buttonState   



// print out the state of the button and it's pin:   

 

 Serial.print("buttonState = "); //prints onto the serial monitor " buttonState = "     

 

 Serial.print(buttonState); //prints onto the serial monitor the value of the buttonState  

 

 Serial.print("\t"); //Adds a space between the two values.
   

 

 Serial.print("pushButton = "); //prints onto the serial monitor " pushButton = "     

 

 Serial.println(pushButton); //Shows the push button’s value and starts a new line on the Serial Monitor.
 

 

 digitalWrite(red,1); //Detects that **buttonState** is always 1, since the colour Red remains on.
 

 

 digitalWrite(green,buttonState); //Turns on when **buttonState** is 1.


 

 digitalWrite(blue,!buttonState); //Turns on when buttonState is 0.

 

 delay(1);  //adds a 1 ms pause between each print on the Serial Monitor.


 
 

}  

 
